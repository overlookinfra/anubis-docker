#!/bin/bash
set -e

# Establish source dir for relative includes
DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi

# Pre-suite (download and extract requested release)
# shellcheck source=../shared/entrypoint-pre disable=SC1091
. "$DIR/../shared/entrypoint-pre"

# Make sure required Anubis env vars are set
# shellcheck source=../shared/entrypoint-anubis-pre disable=SC1091
. "$DIR/../shared/entrypoint-anubis-pre"

# The puppet version selected with `pdk env` defaults to the latest version available for
# a given Ruby version, so to keep thing simpler, disallow specifying a minor version.
valid_version='^[0-9]+$'
version=${2:-7}
if ! [[ $version =~ $valid_version ]] ; then
  echo "Error: Puppet version should be a major version only, e.g. 6" >&2; exit 1
fi

manifests=0

if [ -d "manifests" ]; then
  for f in $(find manifests -type f -name "*.pp")
  do
    manifests=$((manifests+1))
  done
fi

eval $(pdk env --puppet-version=${version})

active_version=$(puppet --version)
active_major_version=$(echo $active_version | grep -oP '^\d+')
if [[ $version != $active_major_version ]] ; then
  echo "Error: Active puppet version set with 'pdk env' does not match requested version." >&2; exit 1
fi

# TODO: consolidate the output generation and error handling into a shared script for use across all evaluations.
# Run parser and emit output to json document
if (( $manifests > 0 )); then
{
  # Note: `pdk env` above will set the Ruby version and default to the latest version of Puppet installed
  # with that Ruby version. If in the future we no longer have a 1-1 relationship between Ruby versions and
  # major versions of Puppet, we can specify which version of Puppet to use in the command below, e.g.
  # puppet _7.3.0_ parser validate
  puppet parser validate --render-as json manifests > parser_output.json
  exit_code=$?
} || {
  true
}
else
  echo 'null' > parser_output.json
  exit_code='nil'
fi

# Ensure file contains valid JSON if there's no output
if [[ ! -s parser_output.json ]]; then
  echo 'null' > parser_output.json
fi
ruby -e "require 'json'; puts ({ \
                                 exit_code: $exit_code, \
                                 manifests: $manifests, \
                                 puppet_version: \"$active_version\", \
                                 output: JSON.parse(File.read('parser_output.json')) \
                              }).to_json" > anubis_output.json
cat anubis_output.json

# Post results back to given API endpoint
# shellcheck source=../shared/entrypoint-anubis-post disable=SC1091
. "$DIR/../shared/entrypoint-anubis-post"

# shellcheck source=shared/entrypoint-post disable=SC1091
. "$DIR/../shared/entrypoint-post"

exit 0

